#!/bin/sh

# Copyright (c) 2012-2019
# See LICENSE for details.
#
# Israel Jacquez <mrkotfw@gmail.com>

PROGNAME="${0##*/}"

MKISOFS_OPTIONS="--norock -sysid \"SEGA SEGASATURN\" -volid \"\" -volset \"\" -publisher \"SEGA ENTERPRISES, LTD.\" -preparer \"SEGA ENTERPRISES, LTD.\" -appid \"SEGA ENTERPRISES, LTD.\" -iso-level 1 -input-charset iso8859-1 -no-bak -m \".*\" -abstract \"ABS.TXT\" -biblio \"BIB.TXT\" -copyright \"CPY.TXT\" -verbose -G \"\${ip_bin_path}\" \"\${directory}\""

panic() {
    printf -- "%s: Error: %s\\n" "${PROGNAME}" "${1}" >&2
    exit "${2}"
}

TMP1_FILE="$(mktemp "${TMPDIR:-/tmp}/tmp.XXXX")" || panic "Couldn't create file" 1

my_readlink() {
    # Not a true implementation of readlink
    printf -- "%s" $(cd $(dirname "${1}") 2>/dev/null && pwd -P && echo "/$(basename ${1})")
}

clean_up() {
    rm -f "${TMP1_FILE}"
}

trap '_exit_code=${?}; clean_up; exit ${_exit_code}' 0
trap 'clean_up; exit 1' HUP INT QUIT ABRT SEGV PIPE

if ! [ ${#} -eq 3 ]; then
    printf -- "Usage: %s cd-directory IP.BIN-path image-output-name\n" "${PROGNAME}" >&2
    exit 2
fi

[ -n "${YAUL_INSTALL_ROOT}" ] || panic "Undefined YAUL_INSTALL_ROOT (install root directory)" 1
[ -d "${YAUL_INSTALL_ROOT}" ] || panic "Invalid YAUL_INSTALL_ROOT (install root directory) value" 1
[ -n "${MAKE_ISO_XORRISO}" ] || panic "Undefined MAKE_ISO_XORRISO (make-iso xorriso executable path)" 1
[ -x "${MAKE_ISO_XORRISO}" ] || panic "Invalid executable \`${MAKE_ISO_XORRISO}'" 1

directory=$(my_readlink "${1}")
ip_bin_path=$(my_readlink "${2}")
image="${3}"

# Check if the CD directory exists and is a directory
[ -L "${directory}" ] && { panic "${directory}: Directory must not be a symbolic link" 1; }
[ -d "${directory}" ] || { panic "${directory}: Directory does not exist" 1; }
[ -r "${directory}" ] || { panic "${directory}: Directory is not readable" 1; }
[ -x "${directory}" ] || { panic "${directory}: Directory is inaccessible" 1; }

# Check if all the files are present
for file in "${ip_bin_path}" "${directory}/ABS.TXT" "${directory}/BIB.TXT" "${directory}/CPY.TXT"; do
    # Needs to be portable (alternative to readlink)
    realpath=$(my_readlink "${file}")

    [ -z "${realpath}" ] && { panic "$(basename "${file}"): Unable to dereference symbolic link" 1; }
    [ -d "${realpath}" ] && { panic "$(basename "${realpath}"): Not a file" 1; }
    [ -f "${realpath}" ] || { panic "$(basename "${realpath}"): Does not exist in $(dirname "${realpath}")" 1; }
    [ -r "${realpath}" ] || { panic "$(basename "${realpath}"): File is not readable" 1; }
done
unset realpath

# Check if ${MAKE_ISO_XORRISO} is installed
iso_tool_realpath=$(my_readlink "${MAKE_ISO_XORRISO}")
if ! [ -f "${iso_tool_realpath}" ] && ! [ -L "${iso_tool_realpath}" ]; then
    panic "${MAKE_ISO_XORRISO}: Does not exist" 1
fi

if ! [ -x "${iso_tool_realpath}" ]; then
    panic "${MAKE_ISO_XORRISO}: Not an executable" 1
fi
unset iso_tool_realpath

# Echo options used
printf -- "%s %s" "${MAKE_ISO_XORRISO}" "${XORRISO_OPTIONS}" >> "${TMP1_FILE}"

# Force delete the existing ISO
rm -f "${image}.iso"

# Format: -as mkisofs ....... -- .......
#         xorriso     mkisofs    xorriso
if ! (eval "${MAKE_ISO_XORRISO}" -as mkisofs "${MKISOFS_OPTIONS}" -- -outdev "${image}.iso" -cd / -map "${directory}" /) >>"${TMP1_FILE}" 2>&1; then
    panic "Unable to create \"${image}.iso\"
>>>
$(sed -E '/^$/d;s/^/>>> /g' "${TMP1_FILE}")
<<<" 1
fi

sed -E '/^$/d;s/^/>>> /g' "${TMP1_FILE}"

clean_up
